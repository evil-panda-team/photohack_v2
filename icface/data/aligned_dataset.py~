import os.path
import random
import torchvision.transforms as transforms
import torch
from data.base_dataset import BaseDataset
from data.image_folder import make_dataset, make_grouped_dataset
from PIL import Image
import pandas
from natsort import natsorted, ns
import glob
import numpy as np

class AlignedDataset(BaseDataset):
    def initialize(self, opt):
        self.opt = opt
        self.root = opt.dataroot
        self.dir_AB = os.path.join(opt.dataroot)
        self.AB_paths = sorted(make_dataset(self.dir_AB))
        self.all_iden=np.loadtxt('/home/esa/Downloads/files/train_vox1.txt',dtype=str)
        assert(opt.resize_or_crop == 'resize_and_crop')
        
#        pdb.set_trace()   
    def __getitem__(self, index):
        
#        print(index)
        
        IM_path=self.AB_paths[index]
        
        
        ind=os.path.basename(os.path.dirname(os.path.dirname((os.path.dirname(IM_path)))))
        
        identity=torch.tensor(np.where(self.all_iden == ind)[0]).unsqueeze(0)#torch.tensor(self.all_iden.index(ind)).unsqueeze(0)
        
        identity_code=identity#torch.zeros(64)
#        identity_code[identity]=1
        
        
        
        all_images_infolder=glob.glob(os.path.dirname(IM_path)+'/*')
        AB_path = natsorted(all_images_infolder, alg=ns.IGNORECASE)
        
        current_index_number=AB_path.index(IM_path)#int(os.path.basename(IM_path)[:-4])
#        last_fra_number = int(os.path.basename(AB_path[len(AB_path)])[:-4])
        if(len(AB_path)>1):
            new_list=AB_path[0:current_index_number] + AB_path[current_index_number+1:len(AB_path)]
#        if current_index_number<len(AB_path)-2:
#           
#            take_away_path=AB_path[current_index_number:current_index_number+3]
#        else:
#            
#            take_away_path=AB_path[current_index_number:current_index_number-3]
            
            take_away_path=random.choice(new_list)
        else:
            take_away_path=AB_path[0]
        
        
        csv_path=os.path.dirname(AB_path[0])
        df = pandas.read_csv(csv_path+'.csv')
        a=list(range(296,299))+ list(range(679,696))#+ list(range(299,435))
        newdf = df[df.columns[a]]
#        f=0
#        print(AB_path[2])
#        pdb.set_trace()
#        for i in take_away_path:
        A = Image.open(AB_path[current_index_number]).convert('RGB')
        A = A.resize((self.opt.loadSize, self.opt.loadSize), Image.BICUBIC)
        A = transforms.ToTensor()(A)
        B = Image.open(take_away_path).convert('RGB')
        B = B.resize((self.opt.loadSize, self.opt.loadSize), Image.BICUBIC)
        B = transforms.ToTensor()(B)
#        frame_numberA=int(os.path.basename(AB_path[current_index_number])[:-4])
        paramA=torch.tensor(newdf.values[current_index_number]).view(1,-1)
        
        frame_numberB=AB_path.index(take_away_path)#int(os.path.basename(take_away_path)[:-4])
        paramB=torch.tensor(newdf.values[frame_numberB]).view(1,-1)
        
        paramA[0,0:3]=(paramA[0,0:3]-(-0.50))/1
        paramA[0,3:20]=paramA[0,3:20]/5
        
        paramB[0,0:3]=(paramB[0,0:3]-(-0.50))/1
        paramB[0,3:20]=paramB[0,3:20]/5
        A = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))(A)
        B = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))(B)
         

        if (not self.opt.no_flip) and random.random() < 0.5:
            idx = [i for i in range(A.size(2) - 1, -1, -1)]
            idx = torch.LongTensor(idx)
            A = A.index_select(2, idx)
#            B = B.index_select(2, idx)
#
#        if input_nc == 1:  # RGB to gray
#            tmp = A[0, ...] * 0.299 + A[1, ...] * 0.587 + A[2, ...] * 0.114
#            A = tmp.unsqueeze(0)

#        if output_nc == 1:  # RGB to gray
#            tmp = B[0, ...] * 0.299 + B[1, ...] * 0.587 + B[2, ...] * 0.114
#            B = tmp.unsqueeze(0)

        return {'A': A, 'B': B, 'PA': paramA, 'PB':paramB, 'I':identity, 'C':identity_code,
                'A_paths': take_away_path, 'B_paths': csv_path}

    def __len__(self):
        return len(self.AB_paths)

    def name(self):
        return 'AlignedDataset'
