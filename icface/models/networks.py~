import torch
import torch.nn as nn
from torch.nn import init
import functools
from torch.autograd import Variable
from torch.optim import lr_scheduler
import torch.nn.functional as F
import pdb
import numpy as np
###############################################################################
# Functions
###############################################################################
def normalize_to_distribution(x):
    x = x.view(x.size(0), -1)
    x_max, idx = torch.max(x, dim=1, keepdim=True)
    x = x / (x_max.expand_as(x) + 1e-8)
    x_sum = torch.sum(x, dim=1)
    x = x / x_sum.unsqueeze(1).expand_as(x)
    return x


def normalize_scale(x):
    x = x.view(x.size(0), -1)
    x_max, idx = torch.max(x, dim=1, keepdim=True)
    x = x / (x_max.expand_as(x) + 1e-8)
    return x


class KLLoss(nn.Module):

    def __init__(self):
        super(KLLoss, self).__init__()

    def forward(self, x0, y0):
        x0 = normalize_to_distribution(x0)
        y0 = normalize_to_distribution(y0)
#        print(x0,y0)
#        pdb.set_trace()
        x_log = torch.log(x0 + 1e-8)
        y_log = torch.log(y0 + 1e-8)

        loss = torch.sum(torch.mul(y0, (y_log - x_log)), dim=1)

        return loss.sum()
    
class ACCLoss(nn.Module):

    def __init__(self):
        super(ACCLoss, self).__init__()

    def forward(self, x0, y0):
        print(x0.size(),y0.size())
        x0 = normalize_to_distribution(x0)
        y0 = normalize_to_distribution(y0)
       
        msx = x0 - x0.mean(dim=1, keepdim=True).expand_as(x0)
        msy = y0 - y0.mean(dim=1, keepdim=True).expand_as(y0)

        denom = torch.sqrt(torch.sum(torch.pow(msx, 2), dim=1)) * torch.sqrt(torch.sum(torch.pow(msy, 2), dim=1))

        # we opimize 1 - rho which means our cost function is at the range of [0-2] where 2 is total disagreement
        loss = 1 - (torch.sum(msx * msy, dim=1) / (denom + 1e-8) )

        return loss.sum()


class ENEGNSSLoss(nn.Module):

    def __init__(self):
        super(ENEGNSSLoss, self).__init__()

    def forward(self, pred, gt_fix):

        pred = normalize_scale(pred)
        gt_fix[gt_fix > 0.0] = 1.0
        gt_fix = gt_fix.view(gt_fix.size(0), -1)

        p_mean = pred.mean(dim=1, keepdim=True).expand_as(pred)
        p_std = pred.std(dim=1, keepdim=True).expand_as(pred)
        pred = (pred - p_mean) / (p_std + 1e-8)

        nss = torch.sum(gt_fix * pred, dim=1, keepdim=True) / gt_fix.sum(dim=1, keepdim=True)
        nss_e = torch.exp(-nss)
        return nss_e.sum()


def weights_init_normal(m):
    classname = m.__class__.__name__
    # print(classname)
    if classname.find('Conv') != -1:
        init.normal(m.weight.data, 0.0, 0.02)
    elif classname.find('Linear') != -1:
        init.normal(m.weight.data, 0.0, 0.02)
    elif classname.find('BatchNorm2d') != -1:
        init.normal(m.weight.data, 1.0, 0.02)
        init.constant(m.bias.data, 0.0)


def weights_init_xavier(m):
    classname = m.__class__.__name__
    # print(classname)
    if classname.find('Conv') != -1:
        init.xavier_normal(m.weight.data, gain=0.02)
    elif classname.find('Linear') != -1:
        init.xavier_normal(m.weight.data, gain=0.02)
    elif classname.find('BatchNorm2d') != -1:
        init.normal(m.weight.data, 1.0, 0.02)
        init.constant(m.bias.data, 0.0)


def weights_init_kaiming(m):
    classname = m.__class__.__name__
    # print(classname)
    if classname.find('Conv') != -1:
        init.kaiming_normal(m.weight.data, a=0, mode='fan_in')
    elif classname.find('Linear') != -1:
        init.kaiming_normal(m.weight.data, a=0, mode='fan_in')
    elif classname.find('BatchNorm2d') != -1:
        init.normal(m.weight.data, 1.0, 0.02)
        init.constant(m.bias.data, 0.0)


def weights_init_orthogonal(m):
    classname = m.__class__.__name__
    print(classname)
    if classname.find('Conv') != -1:
        init.orthogonal(m.weight.data, gain=1)
    elif classname.find('Linear') != -1:
        init.orthogonal(m.weight.data, gain=1)
    elif classname.find('BatchNorm2d') != -1:
        init.normal(m.weight.data, 1.0, 0.02)
        init.constant(m.bias.data, 0.0)


def init_weights(net, init_type='normal'):
    print('initialization method [%s]' % init_type)
    if init_type == 'normal':
        net.apply(weights_init_normal)
    elif init_type == 'xavier':
        net.apply(weights_init_xavier)
    elif init_type == 'kaiming':
        net.apply(weights_init_kaiming)
    elif init_type == 'orthogonal':
        net.apply(weights_init_orthogonal)
    else:
        raise NotImplementedError('initialization method [%s] is not implemented' % init_type)


def get_norm_layer(norm_type='instance'):
    if norm_type == 'batch':
        norm_layer = functools.partial(nn.BatchNorm2d, affine=True)
    elif norm_type == 'instance':
        norm_layer = functools.partial(nn.InstanceNorm2d, affine=False)
    elif norm_type == 'none':
        norm_layer = None
    else:
        raise NotImplementedError('normalization layer [%s] is not found' % norm_type)
    return norm_layer


def get_scheduler(optimizer, opt):
    if opt.lr_policy == 'lambda':
        def lambda_rule(epoch):
            lr_l = 1.0 - max(0, epoch + 1 + opt.epoch_count - opt.niter) / float(opt.niter_decay + 1)
            return lr_l
        scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lambda_rule)
    elif opt.lr_policy == 'step':
#        scheduler = lr_scheduler.StepLR(optimizer, step_size=opt.lr_decay_iters, gamma=0.1)
        scheduler = lr_scheduler.StepLR(optimizer, step_size=150000, gamma=0.1)
    elif opt.lr_policy == 'plateau':
        scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.2, threshold=0.01, patience=5)
    else:
        return NotImplementedError('learning rate policy [%s] is not implemented', opt.lr_policy)
    return scheduler


def define_G(input_nc, output_nc, ngf, which_model_netG, norm='batch', use_dropout=False, init_type='normal', gpu_ids=[]):
    netG = None
    use_gpu = len(gpu_ids) > 0
    norm_layer = get_norm_layer(norm_type=norm)

    if use_gpu:
        assert(torch.cuda.is_available())

    if which_model_netG == 'resnet_9blocks':
        netG = ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9, gpu_ids=gpu_ids)
    elif which_model_netG == 'resnet_6blocks':
        netG = ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=6, gpu_ids=gpu_ids)
    elif which_model_netG == 'unet_128':
        netG = UnetGenerator(input_nc, output_nc, 7, ngf, norm_layer=norm_layer, use_dropout=use_dropout, gpu_ids=gpu_ids)
    elif which_model_netG == 'unet_256':
        netG = UnetGenerator(input_nc, output_nc, 8, ngf, norm_layer=norm_layer, use_dropout=use_dropout, gpu_ids=gpu_ids)
    else:
        raise NotImplementedError('Generator model name [%s] is not recognized' % which_model_netG)
    if len(gpu_ids) > 0:
        netG.cuda(gpu_ids[0])
    init_weights(netG, init_type=init_type)
    return netG


def define_D(input_nc, ndf, which_model_netD,
             n_layers_D=3, norm='batch', use_sigmoid=False, init_type='normal', gpu_ids=[]):
    netD = None
    use_gpu = len(gpu_ids) > 0
    norm_layer = get_norm_layer(norm_type=norm)

    if use_gpu:
        assert(torch.cuda.is_available())
    if which_model_netD == 'basic':
        netD = NLayerDiscriminator(input_nc, ndf, n_layers=3, norm_layer=norm_layer, use_sigmoid=use_sigmoid, gpu_ids=gpu_ids)
    elif which_model_netD == 'n_layers':
        netD = NLayerDiscriminator(input_nc, ndf, n_layers_D, norm_layer=norm_layer, use_sigmoid=use_sigmoid, gpu_ids=gpu_ids)
    elif which_model_netD == 'pixel':
        netD = PixelDiscriminator(input_nc, ndf, norm_layer=norm_layer, use_sigmoid=use_sigmoid, gpu_ids=gpu_ids)
    else:
        raise NotImplementedError('Discriminator model name [%s] is not recognized' %
                                  which_model_netD)
    if use_gpu:
        netD.cuda(gpu_ids[0])
    init_weights(netD, init_type=init_type)
    return netD


def print_network(net):
    num_params = 0
    for param in net.parameters():
        num_params += param.numel()
    print(net)
    print('Total number of parameters: %d' % num_params)


##############################################################################
# Classes
##############################################################################


# Defines the GAN loss which uses either LSGAN or the regular GAN.
# When LSGAN is used, it is basically same as MSELoss,
# but it abstracts away the need to create the target label tensor
# that has the same size as the input
class GANLoss(nn.Module):
    def __init__(self, use_lsgan=True, target_real_label=1.0, target_fake_label=0.0,
                 tensor=torch.FloatTensor):
        super(GANLoss, self).__init__()
        self.real_label = target_real_label
        self.fake_label = target_fake_label
#        self.real_label =torch.empty(1).uniform_(0.8, 1)[0]# target_real_label #
#        self.fake_label = torch.empty(1).uniform_(0, 0.2)[0]#target_fake_label #
        self.real_label_var = None
        self.fake_label_var = None
        self.Tensor = tensor
        if use_lsgan:
            self.loss = nn.MSELoss()
        else:
            self.loss = nn.BCEWithLogitsLoss()#nn.BCELoss()

    def get_target_tensor(self, input, target_is_real):
        target_tensor = None
        if target_is_real:
            create_label = ((self.real_label_var is None) or
                            (self.real_label_var.numel() != input.numel()))
            if create_label:
                real_tensor = self.Tensor(input.size()).fill_(self.real_label)
                self.real_label_var = Variable(real_tensor, requires_grad=False)
            target_tensor = self.real_label_var
        else:
            create_label = ((self.fake_label_var is None) or
                            (self.fake_label_var.numel() != input.numel()))
            if create_label:
                fake_tensor = self.Tensor(input.size()).fill_(self.fake_label)
                self.fake_label_var = Variable(fake_tensor, requires_grad=False)
            target_tensor = self.fake_label_var
        return target_tensor

    def __call__(self, input, target_is_real):
        target_tensor = self.get_target_tensor(input, target_is_real)
        return self.loss(input, target_tensor)

class VGGLoss(nn.Module):
    def __init__(self, gpu_ids):
        super(VGGLoss, self).__init__()        
        self.vgg = Vgg19().cuda()
        self.criterion = nn.L1Loss()
        self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0]        

    def forward(self, x, y):              
        x_vgg, y_vgg = self.vgg(x), self.vgg(y)
        loss = 0
        for i in range(len(x_vgg)):
            loss += self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())        
        return loss
# Defines the generator that consists of Resnet blocks between a few
# downsampling/upsampling operations.
# Code and idea originally from Justin Johnson's architecture.
# https://github.com/jcjohnson/fast-neural-style/
class ResnetGenerator(nn.Module):
    def __init__(self, input_nc, output_nc, ngf=64, norm_layer=nn.BatchNorm2d, use_dropout=False, n_blocks=6, gpu_ids=[], padding_type='reflect'):
        assert(n_blocks >= 0)
        super(ResnetGenerator, self).__init__()
        self.input_nc = input_nc
        self.output_nc = output_nc
        self.ngf = ngf
        self.gpu_ids = gpu_ids
        if type(norm_layer) == functools.partial:
            use_bias = norm_layer.func == nn.InstanceNorm2d
        else:
            use_bias = norm_layer == nn.InstanceNorm2d

        model = [nn.ReflectionPad2d(3),
                 nn.Conv2d(input_nc, ngf, kernel_size=7, padding=0,
                           bias=use_bias),
                 norm_layer(ngf),
                 nn.ReLU(True)]

        n_downsampling = 2
        for i in range(n_downsampling):
            mult = 2**i
            model += [nn.Conv2d(ngf * mult, ngf * mult * 2, kernel_size=3,
                                stride=2, padding=1, bias=use_bias),
                      norm_layer(ngf * mult * 2),
                      nn.ReLU(True)]

        mult = 2**n_downsampling
        for i in range(n_blocks):
            model += [ResnetBlock(ngf * mult, padding_type=padding_type, norm_layer=norm_layer, use_dropout=use_dropout, use_bias=use_bias)]

        for i in range(n_downsampling):
            mult = 2**(n_downsampling - i)
            model += [nn.ConvTranspose2d(ngf * mult, int(ngf * mult / 2),
                                         kernel_size=3, stride=2,
                                         padding=1, output_padding=1,
                                         bias=use_bias),
                      norm_layer(int(ngf * mult / 2)),
                      nn.ReLU(True)]
        model += [nn.ReflectionPad2d(3)]
        model += [nn.Conv2d(ngf, output_nc, kernel_size=7, padding=0)]
        model += [nn.Tanh()]

        self.model = nn.Sequential(*model)

    def forward(self, input):
        if self.gpu_ids and isinstance(input.data, torch.cuda.FloatTensor):
            return nn.parallel.data_parallel(self.model, input, self.gpu_ids)
        else:
            return self.model(input)


# Define a resnet block
class ResnetBlock(nn.Module):
    def __init__(self, dim, padding_type, norm_layer, use_dropout, use_bias):
        super(ResnetBlock, self).__init__()
        self.conv_block = self.build_conv_block(dim, padding_type, norm_layer, use_dropout, use_bias)

    def build_conv_block(self, dim, padding_type, norm_layer, use_dropout, use_bias):
        conv_block = []
        p = 0
        if padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % padding_type)

        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=p, bias=use_bias),
                       norm_layer(dim),
                       nn.ReLU(True)]
        if use_dropout:
            conv_block += [nn.Dropout(0.5)]

        p = 0
        if padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % padding_type)
        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=p, bias=use_bias),
                       norm_layer(dim)]

        return nn.Sequential(*conv_block)

    def forward(self, x):
        out = x + self.conv_block(x)
        return out


# Defines the Unet generator.
# |num_downs|: number of downsamplings in UNet. For example,
# if |num_downs| == 7, image of size 128x128 will become of size 1x1
# at the bottleneck
class UnetGenerator(nn.Module):
    def __init__(self, input_nc, output_nc, num_downs, ngf=64,
                 norm_layer=nn.BatchNorm2d, use_dropout=False, gpu_ids=[]):
        super(UnetGenerator, self).__init__()
        self.gpu_ids = gpu_ids
        # Unet encoder
        self.conv1 = nn.Conv2d(input_nc, ngf, 4, 2, 1)
        self.conv2 = nn.Conv2d(ngf, ngf * 2, 4, 2, 1)
        self.conv2_bn = nn.BatchNorm2d(ngf * 2) #nn.InstanceNorm2d(ngf*2, affine=True)#)#
        self.conv3 = nn.Conv2d(ngf * 2, ngf * 4, 4, 2, 1)
        self.conv3_bn = nn.BatchNorm2d(ngf * 4) #nn.InstanceNorm2d(ngf*4, affine=True)#)#
        self.conv4 = nn.Conv2d(ngf * 4, ngf * 8, 4, 2, 1)
        self.conv4_bn = nn.BatchNorm2d(ngf * 8) #nn.InstanceNorm2d(ngf*8, affine=True)#)#
        self.conv5 = nn.Conv2d(ngf * 8, ngf * 8, 4, 2, 1)
        self.conv5_bn = nn.BatchNorm2d(ngf * 8) #nn.InstanceNorm2d(ngf*8, affine=True)#
        self.conv6 = nn.Conv2d(ngf * 8, ngf * 8, 4, 2, 1)
        self.conv6_bn = nn.BatchNorm2d(ngf * 8) #
        self.conv7 = nn.Conv2d(ngf * 8, ngf * 8, 4, 2, 1)
        self.conv7_bn =nn.BatchNorm2d(ngf * 8) # nn.InstanceNorm2d(ngf*8, affine=True)#
#        self.conv8 = nn.Conv2d(ngf * 8, ngf * 8, 4, 2, 1)
        # self.conv8_bn = nn.BatchNorm2d(d * 8)

        # Unet decoder
#        self.deconv1 = nn.ConvTranspose2d(ngf * 8, ngf * 8, 4, 2, 1)
        self.deconv1=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 8, ngf*8, kernel_size=3, stride=1, padding=1))
        self.deconv1_bn = nn.BatchNorm2d(ngf * 8) #nn.InstanceNorm2d(ngf*8, affine=True)#
#        self.deconv2 = nn.ConvTranspose2d(ngf * 8 * 2, ngf * 8, 4, 2, 1)
        self.deconv2=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 8 * 2, ngf*8, kernel_size=3, stride=1, padding=1))
        
        self.deconv2_bn = nn.BatchNorm2d(ngf * 8) #nn.InstanceNorm2d(ngf*8, affine=True)#
#        self.deconv3 = nn.ConvTranspose2d(ngf * 8 * 2, ngf * 8, 4, 2, 1)
        self.deconv1=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 8*2, ngf*8, kernel_size=3, stride=1, padding=1))
        
        self.deconv3_bn = nn.BatchNorm2d(ngf * 8) #nn.InstanceNorm2d(ngf*8, affine=True)#
#        self.deconv4 = nn.ConvTranspose2d(ngf * 8 * 2, ngf * 4, 4, 2, 1)
        self.deconv4=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 8*2, ngf*4, kernel_size=3, stride=1, padding=1))
        
        self.deconv4_bn = nn.BatchNorm2d(ngf * 4) #nn.InstanceNorm2d(ngf*4, affine=True)#
#        self.deconv5 = nn.ConvTranspose2d(ngf * 4 * 2, ngf * 2, 4, 2, 1)
        self.deconv5=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 4 * 2, ngf*2, kernel_size=3, stride=1, padding=1))
        
        self.deconv5_bn = nn.BatchNorm2d(ngf * 2) #nn.InstanceNorm2d(ngf*2, affine=True)#
#        self.deconv6 = nn.ConvTranspose2d(ngf * 2 * 2, ngf, 4, 2, 1)
        self.deconv6=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 2 * 2, ngf, kernel_size=3, stride=1, padding=1))
        
        self.deconv6_bn = nn.BatchNorm2d(ngf) #nn.InstanceNorm2d(ngf, affine=True)#
#        self.deconv7 = nn.ConvTranspose2d(ngf * 2, output_nc, 4, 2, 1)
        self.deconv7=nn.Sequential( 
                nn.Upsample(scale_factor = 2, mode='nearest'),
#                nn.ReflectionPad2d(1),
                nn.Conv2d(ngf * 2, output_nc, kernel_size=3, stride=1, padding=1))
         
#        self.deconv7_bn = nn.BatchNorm2d(ngf)
#        self.deconv8 = nn.ConvTranspose2d(ngf * 2, output_nc, 4, 2, 1)

    # weight_init
#    def weight_init(self, mean, std):
#        for m in self._modules:
#            normal_init(self._modules[m], mean, std)

    # forward method
   # def forward(self, input):
   #     e1 = self.conv1(input)
   #     e2 = self.conv2_bn(self.conv2(F.relu(e1)))
   #     e3 = self.conv3_bn(self.conv3(F.relu(e2)))
   #     e4 = self.conv4_bn(self.conv4(F.relu(e3)))
    #    e5 = self.conv5_bn(self.conv5(F.relu(e4)))
    #    e6 = self.conv6_bn(self.conv6(F.relu(e5)))
#        e7 = self.conv7_bn(self.conv7(F.leaky_relu(e6, 0.2)))
    #    e7 = self.conv7(F.leaky_relu(e6))
#        e8 = self.conv8(F.leaky_relu(e7, 0.2))
#        e8=e88[:,0:512,:,:]
#        e_return=e88[:,512:1024,:,:]
        # e8 = self.conv8_bn(self.conv8(F.leaky_relu(e7, 0.2)))
    #    d1 = self.deconv1_bn(self.deconv1(F.relu(e7)))
    #    d1 = torch.cat([d1, e6], 1)
    #    d2 = self.deconv2_bn(self.deconv2(F.relu(d1)))
     #   d2 = torch.cat([d2, e5], 1)
     #   d3 = self.deconv3_bn(self.deconv3(F.relu(d2)))
     #   d3 = torch.cat([d3, e4], 1)
     #   d4 = self.deconv4_bn(self.deconv4(F.relu(d3)))
        # d4 = F.dropout(self.deconv4_bn(self.deconv4(F.relu(d3))), 0.5)
     #   d4 = torch.cat([d4, e3], 1)
     #   d44=self.deconv5(F.relu(d4))
     #   d5 = self.deconv5_bn(d44)
     #   d5 = torch.cat([d5, e2], 1)
     #   d6 = self.deconv6_bn(self.deconv6(F.relu(d5)))
     #   d6 = torch.cat([d6, e1], 1)
     #   d7 = self.deconv7(d6)
#        d7 = torch.cat([d7, e1], 1)
#        d8 = self.deconv8(F.relu(d7))
     #   o = F.tanh(d7)

    #    return o#,e_return
    def forward(self, input):
        e1 = self.conv1(input)
        e2 = self.conv2(F.leaky_relu(e1, 0.2))
        e3 = self.conv3(F.leaky_relu(e2, 0.2))
        e4 = self.conv4(F.leaky_relu(e3, 0.2))
        e5 = self.conv5(F.leaky_relu(e4, 0.2))
        e6 = self.conv6(F.leaky_relu(e5, 0.2))
#        e7 = self.conv7_bn(self.conv7(F.leaky_relu(e6, 0.2)))
        e7 = self.conv7(F.leaky_relu(e6, 0.2))
#        e8 = self.conv8(F.leaky_relu(e7, 0.2))
#        e8=e88[:,0:512,:,:]
#        e_return=e88[:,512:1024,:,:]
        # e8 = self.conv8_bn(self.conv8(F.leaky_relu(e7, 0.2)))
        d1 = self.deconv1(F.relu(e7))
        d1 = torch.cat([d1, e6], 1)
        d2 = self.deconv2(F.relu(d1))
        d2 = torch.cat([d2, e5], 1)
        d3 = self.deconv3(F.relu(d2))
        d3 = torch.cat([d3, e4], 1)
        d4 = self.deconv4(F.relu(d3))
        # d4 = F.dropout(self.deconv4_bn(self.deconv4(F.relu(d3))), 0.5)
        d4 = torch.cat([d4, e3], 1)
        d44=self.deconv5(F.relu(d4))
        d5 = self.deconv5_bn(d44)
        d5 = torch.cat([d5, e2], 1)
        d6 = self.deconv6(F.relu(d5))
        d6 = torch.cat([d6, e1], 1)
        d7 = self.deconv7(d6)
#        d7 = torch.cat([d7, e1], 1)
#        d8 = self.deconv8(F.relu(d7))
        o = F.tanh(d7)

        return o#,e_return
    
    
#class UnetGenerator(nn.Module):
#    def __init__(self, input_nc, output_nc, num_downs, ngf=64,
#                 norm_layer=nn.BatchNorm2d, use_dropout=False, gpu_ids=[]):
#        super(UnetGenerator, self).__init__()
#        self.gpu_ids = gpu_ids
#
#        # construct unet structure
#        unet_block = UnetSkipConnectionBlock(ngf * 8, ngf * 8, input_nc=None, submodule=None, norm_layer=norm_layer, innermost=True)
#        for i in range(num_downs - 5):
#            unet_block = UnetSkipConnectionBlock(ngf * 8, ngf * 8, input_nc=None, submodule=unet_block, norm_layer=norm_layer, use_dropout=use_dropout)
#        unet_block = UnetSkipConnectionBlock(ngf * 4, ngf * 8, input_nc=None, submodule=unet_block, norm_layer=norm_layer)
#        unet_block = UnetSkipConnectionBlock(ngf * 2, ngf * 4, input_nc=None, submodule=unet_block, norm_layer=norm_layer)
#        unet_block = UnetSkipConnectionBlock(ngf, ngf * 2, input_nc=None, submodule=unet_block, norm_layer=norm_layer)
#        unet_block = UnetSkipConnectionBlock(output_nc, ngf, input_nc=input_nc, submodule=unet_block, outermost=True, norm_layer=norm_layer)
#
#        self.model = unet_block
#
#    def forward(self, input):
#        if self.gpu_ids and isinstance(input.data, torch.cuda.FloatTensor):
#            return nn.parallel.data_parallel(self.model, input, self.gpu_ids)
#        else:
#            return self.model(input)
#
#
## Defines the submodule with skip connection.
## X -------------------identity---------------------- X
##   |-- downsampling -- |submodule| -- upsampling --|
#class UnetSkipConnectionBlock(nn.Module):
#    def __init__(self, outer_nc, inner_nc, input_nc=None,
#                 submodule=None, outermost=False, innermost=False, norm_layer=nn.BatchNorm2d, use_dropout=False):
#        super(UnetSkipConnectionBlock, self).__init__()
#        self.outermost = outermost
#        if type(norm_layer) == functools.partial:
#            use_bias = norm_layer.func == nn.InstanceNorm2d
#        else:
#            use_bias = norm_layer == nn.InstanceNorm2d
#        if input_nc is None:
#            input_nc = outer_nc
#        downconv = nn.Conv2d(input_nc, inner_nc, kernel_size=4,
#                             stride=2, padding=1, bias=use_bias)
#        downrelu = nn.LeakyReLU(0.2, True)
#        downnorm = norm_layer(inner_nc)
#        uprelu = nn.ReLU(True)
#        upnorm = norm_layer(outer_nc)
#
#        if outermost:
#            upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc,
#                                        kernel_size=4, stride=2,
#                                        padding=1)
#            down = [downconv]
#            up = [uprelu, upconv, nn.Tanh()]
#            model = down + [submodule] + up
#        elif innermost:
#            upconv = nn.ConvTranspose2d(inner_nc, outer_nc,
#                                        kernel_size=4, stride=2,
#                                        padding=1, bias=use_bias)
#            down = [downrelu, downconv]
#            up = [uprelu, upconv, upnorm]
#            model = down + up
#        else:
#            upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc,
#                                        kernel_size=4, stride=2,
#                                        padding=1, bias=use_bias)
#            down = [downrelu, downconv, downnorm]
#            up = [uprelu, upconv, upnorm]
#
#            if use_dropout:
#                model = down + [submodule] + up + [nn.Dropout(0.5)]
#            else:
#                model = down + [submodule] + up
#
#        self.model = nn.Sequential(*model)
#
#    def forward(self, x):
#        if self.outermost:
#            return self.model(x)
#        else:
#            return torch.cat([x, self.model(x)], 1)


# Defines the PatchGAN discriminator with the specified arguments.
class NLayerDiscriminator(nn.Module):
    def __init__(self, input_nc, ndf=64, n_layers=3, norm_layer=nn.BatchNorm2d, use_sigmoid=False, gpu_ids=[]):
        super(NLayerDiscriminator, self).__init__()
        self.gpu_ids = gpu_ids
        if type(norm_layer) == functools.partial:
            use_bias = norm_layer.func == nn.InstanceNorm2d
        else:
            use_bias = norm_layer == nn.InstanceNorm2d

        kw = 3
        padw = 1
        sequence = [
            nn.Conv2d(input_nc, ndf, kernel_size=kw, stride=1, padding=padw),
            nn.Conv2d(ndf, ndf, kernel_size=kw, stride=2, padding=padw),
#            nn.LeakyReLU(0.2, True)
            nn.ReLU()
        ]

        nf_mult = 1
        nf_mult_prev = 1
        for n in range(1, n_layers):
            nf_mult_prev = nf_mult
            nf_mult = min(2**n, 8)
            sequence += [
                
                nn.Conv2d(ndf * nf_mult_prev,  ndf * nf_mult,
                          kernel_size=kw, stride=1, padding=padw, bias=use_bias),
                nn.Conv2d(ndf * nf_mult, ndf * nf_mult,
                          kernel_size=kw, stride=2, padding=padw, bias=use_bias),
#                nn.LayerNorm([ndf * nf_mult,np.int(ndf/nf_mult),np.int(ndf/nf_mult)]),
#                norm_layer(ndf * nf_mult),
#                nn.LeakyReLU(0.2, True)
                nn.ReLU()
            ]

        nf_mult_prev = nf_mult
        nf_mult = min(2**n_layers, 8)
        sequence += [
            nn.Conv2d(ndf * nf_mult_prev, ndf * nf_mult,
                      kernel_size=kw, stride=1, padding=padw, bias=use_bias),
            
#            nn.LayerNorm([ndf*nf_mult,15,15]),
#            norm_layer(ndf * nf_mult),
#            nn.LeakyReLU(0.2, True)
            nn.ReLU()
        ]
        sequence += [nn.Conv2d(ndf * nf_mult,ndf * nf_mult, kernel_size=kw, stride=1, padding=padw)]
        sequence += [nn.Conv2d(ndf * nf_mult, 128, kernel_size=kw, stride=2, padding=padw)]

#        if use_sigmoid:
      #  sequence += [nn.Sigmoid()]
         
        self.model = nn.Sequential(*sequence)
        self.conv1=nn.Conv2d(128, 1, kernel_size=4, stride=1, padding=1, bias=True)
        
        self.conv2=nn.Linear(128*8**2,20)#nn.Conv2d(128, 20, kernel_size=4, stride=1, padding=0, bias=True)
        
        self.aux_layer = nn.Sequential(nn.Linear(128*8**2, 939),
                                        nn.Softmax())

    def forward(self, input):
        out1=nn.parallel.data_parallel(self.model, input, self.gpu_ids)# self.model(input)
#        out=F.sigmoid(self.conv1(out1))
        out=self.conv1(out1)
        cond=F.sigmoid(self.conv2(out1.view(out1.shape[0],-1)))
        
        class_pred=self.aux_layer(out1.view(out1.shape[0], -1))
        return out,cond,class_pred
  #      self.model = nn.Sequential(*sequence)

#    def forward(self, input):
 #       if len(self.gpu_ids) and isinstance(input.data, torch.cuda.FloatTensor):
  #          return nn.parallel.data_parallel(self.model, input, self.gpu_ids)
   #     else:
    #        return self.model(input)


class PixelDiscriminator(nn.Module):
    def __init__(self, input_nc, ndf=64, norm_layer=nn.BatchNorm2d, use_sigmoid=False, gpu_ids=[]):
        super(PixelDiscriminator, self).__init__()
        self.gpu_ids = gpu_ids
        if type(norm_layer) == functools.partial:
            use_bias = norm_layer.func == nn.InstanceNorm2d
        else:
            use_bias = norm_layer == nn.InstanceNorm2d

        self.net = [
            nn.Conv2d(input_nc, ndf, kernel_size=1, stride=1, padding=0),
            nn.LeakyReLU(0.2, True),
            nn.Conv2d(ndf, ndf * 2, kernel_size=1, stride=1, padding=0, bias=use_bias),
            norm_layer(ndf * 2),
            nn.LeakyReLU(0.2, True),
            nn.Conv2d(ndf * 2, 1, kernel_size=1, stride=1, padding=0, bias=use_bias)]

        if use_sigmoid:
            self.net.append(nn.Sigmoid())

        self.net = nn.Sequential(*self.net)

    def forward(self, input):
        if len(self.gpu_ids) and isinstance(input.data, torch.cuda.FloatTensor):
            return nn.parallel.data_parallel(self.net, input, self.gpu_ids)
        else:
            return self.net(input)

from torchvision import models
class Vgg19(torch.nn.Module):
    def __init__(self, requires_grad=False):
        super(Vgg19, self).__init__()
        vgg_pretrained_features = models.vgg19(pretrained=True).features
        self.slice1 = torch.nn.Sequential()
        self.slice2 = torch.nn.Sequential()
        self.slice3 = torch.nn.Sequential()
        self.slice4 = torch.nn.Sequential()
        self.slice5 = torch.nn.Sequential()
        for x in range(2):
            self.slice1.add_module(str(x), vgg_pretrained_features[x])
        for x in range(2, 7):
            self.slice2.add_module(str(x), vgg_pretrained_features[x])
        for x in range(7, 12):
            self.slice3.add_module(str(x), vgg_pretrained_features[x])
        for x in range(12, 21):
            self.slice4.add_module(str(x), vgg_pretrained_features[x])
        for x in range(21, 30):
            self.slice5.add_module(str(x), vgg_pretrained_features[x])
        if not requires_grad:
            for param in self.parameters():
                param.requires_grad = False

    def forward(self, X):
        h_relu1 = self.slice1(X)
        h_relu2 = self.slice2(h_relu1)        
        h_relu3 = self.slice3(h_relu2)        
        h_relu4 = self.slice4(h_relu3)        
        h_relu5 = self.slice5(h_relu4)                
        out = [h_relu1, h_relu2, h_relu3, h_relu4, h_relu5]
        return out
